加载更多

1.在list.php 最后面
 引入jq
 1 给加载更多绑定点击事件
 2 发送ajax 把 当前分类  第几次点击  每次获取10条 发送到后台

 3 后台 把当前分类对应的 新的十条数据  返回给前端
 
 4 前端拿到十条数据  $.each循环 生成十篇文章 插入到 加载更多的前面


3  点击文章的标题  跳转到 detail.php页面 这个页面应该显示当前这篇文章的详细内容
  3.1 在list.php  foreach循环的文章上面加上 postId  <a href="detail.php?postId=<?php echo $value["id"] ?>">
  3.2 在detail.php  引入对应的php文件 并且获取到传过来的 postId
      根据文章postId 连接数据库查询出当前文章的数据 显示到页面上


后台管理的所有页面

1.登录功能
 
localhost/bx/admin/login.php
 输入邮箱密码
 1 点击登录按钮
 2 判断邮箱密码格式是否正确
 3 发送ajax 把用户名和密码发送到php
 4 成功跳转到index.php 失败提示失败

 php 拿到前端发来的用户名和密码 查询数据库 看看有没有这个人
     如果有 可以登录  如果没有 提示 不能登录

activated 激活的 可以用
unactivated 没有激活  不能用



session cookie 在a页面可以存值 在其他页面 可以取出来用

session 要使用 必须先调用 session_start()开启
session 怎么存？
$_SESSION[名字]=值

取值  $_SESSION[名字]

cookie 存
setcookie(名字,值)
取
 $_COOKIE[名字]







有一些需要特定去查询或其他操作 一般都是通过id去操作 因为id是唯一的 

json_encode(数组);//把数组变成 长的很像数组的字符串
json_decode(字符串,true);//字符串变成数组对象

//jq的方法已经封装使用JSON.parse给你转了
      $.ajax({
         type:"post",
         url:"api/_getMorePost.php",
         data:{},
        // dataType:"json",php写了header这就不用写了
         success:function(res){
            console.log(res);
         }
      })

前端拿到 要不是数组 要不是对象

location 浏览器地址栏的所有东西  
location.href 完整地址
location.search   ?后面的参数

location.search   "?categoryId=3"

location.search.split("=")   split("=") 把字符串按照 =分割 变成一个数组 ["?categoryId", "3"]

location.search.split("=")[1]  ---》3

分页公式
$currentPage=1;//默认为1 第几次
$pageSize=10;//每次显示几条
$offset=($currentPage-1)*$pageSize;//计算出 从哪个索引开始

select * from posts 
limit {$offset},{$pageSize}

jq封装的循环

$("div").each
 $.each(数组,function(index,val){//index是索引  val是数组的每一项值

  })

新出 es6 
//反引号 1的左边波浪线 英文状态直接打就是反引号 ``
    // `` 里面的都是字符串 只有 ${name} 这个里面的才认为是变量


$(str) 可以把字符串变成jq对象

a.insertBefore('b') jq的方法  把b插入到a之前
append
a.appendTo(c) 把a 吐到 c里面去
                   //$(str).appendTo('tbody');
                  //  $("tbody").html(str);
                // $(str).insertBefore('tbody');

登录页面

http://localhost/bx/admin/login.php

填写邮箱和密码  点击登录按钮

发送 ajax 把邮箱和密码   传到php

php 获取邮箱和密码  去数据库查询 如果有这个人 登陆成功 如果没有 登录失败

 // 判断邮箱格式是否正确  74872648@qq.com \w数字字母下划线 \d数字 .的意思任意字符 

\. [.] 的意思真的就是想要 . 这个字符

var reg=/^\w+@\w+\.\w+$/;
 // var reg=/^\w+@\w+[.]\w+$/; reg.test(email) 匹配 如果正确返回true 不正确返回false

activated 激活的 可以用的




























































